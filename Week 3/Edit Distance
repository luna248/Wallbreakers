class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        # I'll be using a 2D array to keep track of the minimum distance. This approach
        # calculates the cost to convert word 1 to word 2 at any substring of either of the
        # words (Dynamic Programming).

        M,N = len(word1), len(word2)

        # With this problem I learnt about the underscore and xrange in python, both of
        # which I have used to improve optimality and reduce memory usage
        dp = [[0 for _ in xrange(N+1)] for _ in xrange(M+1)]

        # The first row and column are initialized with the cost to convert an empty string
        # into the given words
        for i in xrange(M+1):
            dp[i][0] = i

        for j in xrange(N+1):
            dp[0][j] = j

        #The rest is calculated by taking the minimum of the cells surrounding it (Replace,
        # delete, and insert cost) and adding a 1 (if the letters need another operation)
        # or nothing if they don't
        for i in xrange(1, M+1, 1):
            for j in xrange (1, N+1, 1):
                if word1[i-1]==word2[j-1]:
                    dp[i][j]= dp[i-1][j-1]
                else:
                    dp[i][j]= 1+ min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1])

        return dp[M][N]
